#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        GMW.py
#
#  Project :     GMW
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sci.comp$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["GMW", "GMWClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(GMW.additionnal_import) ENABLED START -----#
import socket
import select
import traceback
import numpy as np
#----- PROTECTED REGION END -----#	//	GMW.additionnal_import

# Device States Description
# INIT : The Device goes into this State during initialization..
# ON : The Device is in this State when the PicoFLEX is switched on and in normal \noperation.
# OFF : The Device is in this State when the PicoFlex is switched OFF.
# FAULT : The tangoDevice enters this state when there is an erro, e.g. a communication error.


class GMW (PyTango.Device_4Impl):
    """This Tango Device Class is used to set and readout 
    the GMW 231HC model current amplifier."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(GMW.global_variables) ENABLED START -----#
    
    
    # Measured values to be used for the interpolation to set and read out the magnetic field
    current_monitor = [-7.0074,-6.6513,-6.3081,-5.9527,-5.5980,-5.2580,-4.9136,-4.5479,-4.2073,-3.8577,-3.4971,-3.1501,-2.7969,-2.4454,-2.1084,-1.7436,-1.3934,-1.0512,-0.7035,-0.3513,0.0010,0.3513,0.7035,1.0512,1.3934,1.7436,2.1084,2.4454,2.7969,3.1501,3.4971,3.8577,4.2073,4.5479,4.9136,5.2580,5.5980,5.9527,6.3081,6.6513,7.0074]
    voltage_monitor = [-2.1380,-2.0597,-1.9292,-1.8335,-1.7233,-1.5989,-1.5029,-1.3802,-1.3012,-1.1778,-1.0840,-0.9784,-0.8649,-0.7628,-0.6584,-0.5434,-0.4406,-0.3339,-0.2166,-0.1058,0.0088,0.1058,0.2166,0.3339,0.4406,0.5434,0.6584,0.7628,0.8649,0.9784,1.0840,1.1778,1.3012,1.3802,1.5029,1.5989,1.7233,1.8335,1.9292,2.0597,2.1380]    
    magnetic_field = [-17.40,-17.35,-17.10,-17.00,-16.82,-16.6,-16.38,-16.12,-15.93,-15.46,-14.9,-14.4,-13.6,-12.49,-11.02,-9.29,-7.477,-5.64,-3.78,-1.90,0,1.90,3.78,5.64,7.477,9.29,11.02,12.49,13.6,14.4,14.9,15.46,15.93,16.12,16.38,16.6,16.82,17.00,17.10,17.35,17.40]
    v_output = [-10,-9.5,-9,-8.5,-8,-7.5,-7,-6.5,-6,-5.5,-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10]
    
    #----- PROTECTED REGION END -----#	//	GMW.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        GMW.init_device(self)
        #----- PROTECTED REGION ID(GMW.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GMW.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(GMW.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GMW.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_magnetField_read = 0.0
        self.attr_currentMonitor_read = 0.0
        self.attr_voltageMonitor_read = 0.0
        self.attr_fieldMonitorPlus_read = 0.0
        self.attr_fieldMonitorMinus_read = 0.0
        self.attr_amplifierPower_read = False
        self.attr_normal_read = False
        self.attr_inhibit_read = False
        self.attr_moduleFault_read = False
        self.attr_dcFault_read = False
        self.attr_overCurrent_read = False
        self.attr_overTemperature_read = False
        self.attr_interlockStatus_read = False
        self.attr_magnetField_target_read = 0.0
        #----- PROTECTED REGION ID(GMW.init_device) ENABLED START -----#
        self.set_state(PyTango.DevState.INIT)        
        self.set_status("Initialising Tango Device...")        
        self.debug_stream("Initialising Tango Device...")
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket_connect()
            
                                       
        #----- PROTECTED REGION END -----#	//	GMW.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(GMW.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GMW.always_executed_hook

    # -------------------------------------------------------------------------
    #    GMW read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_magnetField(self, attr):
        self.debug_stream("In read_magnetField()")
        #----- PROTECTED REGION ID(GMW.magnetField_read) ENABLED START -----#
        
        # We have to calculate the magnetic field from the voltage_monitor            
        voltage = self.read_voltage()
        self.debug_stream("Volt monitor = " + str(voltage))
        self.debug_stream("Converting " + str(voltage) + " Volts in Magnetic Field...")
        newMagField = np.interp(voltage, 
                              self.voltage_monitor, 
                              self.magnetic_field)
        self.debug_stream("Magnetic Field = " + str(newMagField) + " kGauss")                              
                              
        self.attr_magnetField_read = newMagField 
        attr.set_value(self.attr_magnetField_read)
        
        #----- PROTECTED REGION END -----#	//	GMW.magnetField_read
        
    def write_magnetField(self, attr):
        self.debug_stream("In write_magnetField()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(GMW.magnetField_write) ENABLED START -----#
        self.set_status("Reading/writing data")    
        self.debug_stream("Converting %d kGauss in Volts...", data )
        self.attr_magnetField_target = data
        volt = np.interp(data, self.magnetic_field, self.v_output)
        cmd_str="set_voltage " + str(volt)        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        
        if resp.rstrip("\r\n") == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','write_magnetField()')    
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
		
        #----- PROTECTED REGION END -----#	//	GMW.magnetField_write
        
    def read_currentMonitor(self, attr):
        self.debug_stream("In read_currentMonitor()")
        #----- PROTECTED REGION ID(GMW.currentMonitor_read) ENABLED START -----#
        self.set_status("Reading/writing data")                                        

        cmd_str="read_current"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
                
        if sresp == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_currentMonitor()')            
        else:  
            try:                
                self.attr_currentMonitor_read = float("{0:.3f}".format(float(sresp)))
                attr.set_value(self.attr_currentMonitor_read)
            except ValueError:
                self.set_state(PyTango.DevState.WARNING)
                self.set_status("Incorrect replay! Expected a float, received " +sresp )             
                self.debug_stream("Incorrect reply! Expected a float, received " +sresp )                
        
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
            
        
        #----- PROTECTED REGION END -----#	//	GMW.currentMonitor_read        
        
    def read_voltageMonitor(self, attr):
        self.debug_stream("In read_voltageMonitor()")
        #----- PROTECTED REGION ID(GMW.voltageMonitor_read) ENABLED START -----#
        self.set_status("Reading/writing data")                                        

        cmd_str="read_voltage"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if sresp == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_voltageMonitor()')            
        else:
            try:
                self.attr_voltageMonitor_read = float("{0:.3f}".format(float(resp)))
                attr.set_value(self.attr_voltageMonitor_read)
            except ValueError:
                self.set_state(PyTango.DevState.WARNING)
                self.set_status("Incorrect replay! Expected a float, received " +sresp )             
                self.debug_stream("Incorrect reply! Expected a float, received " +sresp )   
                
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.voltageMonitor_read
        
    def read_fieldMonitorPlus(self, attr):
        self.debug_stream("In read_fieldMonitorPlus()")
        #----- PROTECTED REGION ID(GMW.fieldMonitorPlus_read) ENABLED START -----#
        self.set_status("Reading/writing data")                                        

        cmd_str="read_field_plus"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if resp.rstrip("\r\n") == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_fieldMonitorPlus()')            
        else:
            try:
                self.attr_fieldMonitorPlus_read = float("{0:.3f}".format(float(sresp)))      
                attr.set_value(self.attr_fieldMonitorPlus_read)
            except ValueError:
                self.set_state(PyTango.DevState.WARNING)
                self.set_status("Incorrect replay! Expected a float, received " +sresp )             
                self.debug_stream("Incorrect reply! Expected a float, received " +sresp ) 
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.fieldMonitorPlus_read
        
    def read_fieldMonitorMinus(self, attr):
        self.debug_stream("In read_fieldMonitorMinus()")
        #----- PROTECTED REGION ID(GMW.fieldMonitorMinus_read) ENABLED START -----#
        self.set_status("Reading/writing data")                                        

        cmd_str="read_field_minus"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if resp.rstrip("\r\n") == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_fieldMonitorMinus()')            
        else:
            try:
                self.attr_fieldMonitorMinus_read = float("{0:.3f}".format(float(resp)))        
                attr.set_value(self.attr_fieldMonitorMinus_read)
            except ValueError:
                self.set_state(PyTango.DevState.WARNING)
                self.set_status("Incorrect replay! Expected a float, received " +sresp )             
                self.debug_stream("Incorrect reply! Expected a float, received " +sresp ) 
                
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.fieldMonitorMinus_read
        
    def read_amplifierPower(self, attr):
        self.debug_stream("In read_amplifierPower()")
        #----- PROTECTED REGION ID(GMW.amplifierPower_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_amplifier_power"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect raply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_amplifierPower()')            
        else:
            self.attr_amplifierPower_read = eval(sresp)                   
            attr.set_value(self.attr_amplifierPower_read)        
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.amplifierPower_read
        
    def read_normal(self, attr):
        self.debug_stream("In read_normal()")
        #----- PROTECTED REGION ID(GMW.normal_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_normal"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect raply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_normal()')            
        else:
            self.attr_normal_read = eval(sresp)                  
            attr.set_value(self.attr_normal_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.normal_read
        
    def read_inhibit(self, attr):
        self.debug_stream("In read_inhibit()")
        #----- PROTECTED REGION ID(GMW.inhibit_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_inhibit"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_inhibit()')             
        else:
            self.attr_inhibit_read = eval(sresp)                               
            attr.set_value(self.attr_inhibit_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.inhibit_read
        
    def read_moduleFault(self, attr):
        self.debug_stream("In read_moduleFault()")
        #----- PROTECTED REGION ID(GMW.moduleFault_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_module_fault"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_moduleFault')                   
        else:
            self.attr_moduleFault_read = eval(sresp)                                         
            attr.set_value(self.attr_moduleFault_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.moduleFault_read
        
    def read_dcFault(self, attr):
        self.debug_stream("In read_dcFault()")
        #----- PROTECTED REGION ID(GMW.dcFault_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_dc_fault"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_dcFault()')            
        else:
            self.attr_dcFault_read = eval(sresp)                                                     
            attr.set_value(self.attr_dcFault_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.dcFault_read
        
    def read_overCurrent(self, attr):
        self.debug_stream("In read_overCurrent()")
        #----- PROTECTED REGION ID(GMW.overCurrent_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_over_current"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_overCurrent()')              
        else:
            self.attr_overCurrent_read = eval(sresp)                                                      
            attr.set_value(self.attr_overCurrent_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.overCurrent_read
        
    def read_overTemperature(self, attr):
        self.debug_stream("In read_overTemperature()")
        #----- PROTECTED REGION ID(GMW.overTemperature_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_over_temperature"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)        
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_overTemperature()')            
        else:
            self.attr_overTemperature_read = eval(sresp)                                                                 
            attr.set_value(self.attr_overTemperature_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.overTemperature_read
        
    def read_interlockStatus(self, attr):
        self.debug_stream("In read_interlockStatus()")
        #----- PROTECTED REGION ID(GMW.interlockStatus_read) ENABLED START -----#
        self.set_status("Reading data")                                        

        cmd_str="read_interlock"        
        resp_err = "*** KEY ERROR"         
        resp = self.socket_write_and_read(cmd_str)
        sresp = resp.rstrip("\r\n")
        
        if (sresp == resp_err or sresp != "True" or sresp != "False"):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect reply, check command syntax!")             
            self.debug_stream("Incorrect reply: " +sresp)             
            PyTango.Except.throw_exception('Communication Error','Bad answer','read_interlockStatus()')            
        else:
            self.attr_interlockStatus_read = eval(sresp)                                                                
            attr.set_value(self.attr_interlockStatus_read)
            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
        
        #----- PROTECTED REGION END -----#	//	GMW.interlockStatus_read
        
    def read_magnetField_target(self, attr):
        self.debug_stream("In read_magnetField_target()")
        #----- PROTECTED REGION ID(GMW.magnetField_target_read) ENABLED START -----#
        attr.set_value(self.attr_magnetField_target_read)
        
        #----- PROTECTED REGION END -----#	//	GMW.magnetField_target_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(GMW.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GMW.read_attr_hardware


    # -------------------------------------------------------------------------
    #    GMW command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(GMW.programmer_methods) ENABLED START -----#
    def isGmwAlive(self):
        self.debug_stream("In isGmwAlive()")
       
        self.set_status("Reading/writing data")
        cmd_str = "read_module_fault"
        resp_err = "*** KEY ERROR" 
        resp_true = "True"
        resp_false = "False"
        resp = self.socket_write_and_read(cmd_str)
        self.debug_stream("Received: " + str(resp))
        
        if (resp.rstrip("\r\n")) == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check socket status !")             
            self.debug_stream("Incorrect request, check socket status !")
            PyTango.Except.throw_exception('Communication Error','No reply from device','isGmwAlive()') 
            
        elif (resp.rstrip("\r\n")) == resp_false:
            self.debug_stream("MOSFET Module Fault") 
            self.attr_moduleFault_read = "False"
            return 0
          
        elif (resp.rstrip("\r\n")) == resp_true:
            self.debug_stream("MOSFET Module Working!")
            self.attr_moduleFault_read = "True"
            return 1
            
            
    def read_current(self):
        self.debug_stream("In read_current()")                      

        cmd_str="read_current"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        
        if resp.rstrip("\r\n") == resp_err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_current()')            
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
            return float("{0:.5f}".format(float(resp)))
            
            
    def read_voltage(self):
        self.debug_stream("In read_voltage()")                      

        cmd_str="read_voltage"        
        resp_err = "*** KEY ERROR"                
        resp = self.socket_write_and_read(cmd_str)
        
        if resp.rstrip("\r\n") == resp_err:
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("Incorrect request, check command syntax!")             
            self.debug_stream("Incorrect request, check command syntax!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_voltage()')            
        if (resp == ''):
            self.set_state(PyTango.DevState.WARNING)
            self.set_status("The device responded with an empty string")             
            self.debug_stream("Incorrect reply: the device responded with an empty string!")             
            PyTango.Except.throw_exception('Communication Error','Command not acknowledged','read_voltage()')
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
            return float("{0:.5f}".format(float(resp.rstrip("\r\n"))))
            

    #------------------------------------------------------------------
    #    Connect socket utility
    #    Tries to connect and set device state
    #------------------------------------------------------------------
    def socket_connect(self):
        try:
            self.s.close()
            del self.s
        except:
            pass
        try:
            # Connects to GMW hardware...
            self.set_state(PyTango.DevState.ON)
            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.s.settimeout(1)
            self.s.connect((self.ip_address,self.port))
            print self.ip_address,self.port
            self.debug_stream("After connect")  
                                
            '''if  self.isGmwAlive():
                self.set_status("Device initialised") 
                self.debug_stream("Device initialised!")                                                          
            else:
                self.set_state(PyTango.DevState.FAULT)  
                self.set_status("init_device() FAILED")
                self.error_stream("init_device() FAILED")  
                '''                                                                              
                
        except socket.error, e:
            self.set_state(PyTango.DevState.FAULT) 
            self.set_status("init_device() FAILED")
            self.error_stream("Couldn't connect with the socket: %s" % e ) 
            #self.s.close()

    #------------------------------------------------------------------
    #    Read/write socket utility
    #    Returns a string in case of a proper reply,
    #    0 for failure, 1 for succesful reply, 2 for NAK.
    #------------------------------------------------------------------
    def socket_write_and_read(self, argin):
        if self.get_state() == PyTango.DevState.FAULT:
            self.socket_connect()
            if self.get_state() != PyTango.DevState.ON:
                PyTango.Except.throw_exception('Communication Error','Socket Connection Error','socket_write_and_read()')
        self.debug_stream("In socket_write_and_read()")
        self.set_status("Reading/writing socket")
        
        resp_err = "*** KEY ERROR"

        argin = str(argin) 
        picocommand = argin.rstrip('\r\n')+"\r\n"
        
        attempts = 0
        max_attempts = 2 # In an exception, retry once.
        
        while (attempts < max_attempts):
            try:                     
                attempts += 1                
                reply=''                
                self.debug_stream("Sending command " + picocommand.rstrip('\r\n') + " to GMW...")
                self.s.send(picocommand)               
                read_list = [self.s]                
                readable,writable,errored = select.select(read_list,[],[],0.5)                
                for rsock in readable:
                    if self.s is rsock:
                        #reply = ''
                        while "\r\n" not in reply:                                                                           
                            read_data = self.s.recv(1024)                                
                            reply += read_data 
                            self.debug_stream("Data received: " + str(reply.rstrip('\r\n')))   
                                                                                                                                                                                                                                               
                if reply == resp_err:
                    self.status_string = "Cmd " + picocommand + " failed, no reply"
                    self.debug_stream("Command " + picocommand + " failed")
                    #return 0    
                elif len(reply) > 0:
                    return reply                                   

            except socket.error:
                self.set_state(PyTango.DevState.FAULT)
                PyTango.Except.throw_exception('Communication Error','Socket Error','socket_write_and_read()')         
                self.error_stream("Socket connection raised exception ")
                self.debug_stream("Socket connection raised exception ")
            
            except Exception:
                self.set_state(PyTango.DevState.FAULT)
                PyTango.Except.throw_exception('Communication Error','General Communication Error','socket_write_and_read()')         
                err_msg = traceback.print_exc(file=sys.stdout)
                self.debug_stream("Exception thrown: "+ str(err_msg))
                

        # Socket problem persists, set state to FAULT
        self.set_state(PyTango.DevState.FAULT)
        PyTango.Except.throw_exception('Communication Error','No reply from device','socket_write_and_read()')  
        
   
       
    #----- PROTECTED REGION END -----#	//	GMW.programmer_methods

class GMWClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(GMW.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	GMW.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'ip_address':
            [PyTango.DevString, 
            "TCP Server IP address.",
            ["172.19.10.65"] ],
        'port':
            [PyTango.DevLong, 
             '',
            [55000]],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'magnetField':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Magnetic Field Intensity",
                'unit': "Gauss",
                'display unit': "kG",
            } ],
        'currentMonitor':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Current Monitor",
                'unit': "[A]",
                'display unit': "[A]",
                'description': "+/-1V / 10A",
            } ],
        'voltageMonitor':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Voltage Monitor",
                'unit': "[V]",
                'display unit': "[V]",
                'description': "+/-1V / 20V",
            } ],
        'fieldMonitorPlus':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Field Monitor Plus",
            } ],
        'fieldMonitorMinus':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Field Monitor Minus",
            } ],
        'amplifierPower':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "+5V (Amplifier Power)",
                'description': "Active high, the 231HC DC supply is providing sufficient voltage for operation.",
            } ],
        'normal':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Normal",
                'description': "Active low, the 231HC is ready and ill operate when not inhibited.",
            } ],
        'inhibit':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Inhibit",
                'description': "Active low, the front panel inhibit switch is active.",
            } ],
        'moduleFault':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Module Fault",
                'description': "Active low, the 231HC has a fault in the MOSFET power output module.",
            } ],
        'dcFault':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "DC Fault",
                'description': "Active low, one or more DC voltages are outside operating limits.",
            } ],
        'overCurrent':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Over Current",
                'description': "Active low, the 231HC is disabled due to current over limits.",
            } ],
        'overTemperature':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Over Temperature",
                'description': "Active low, the 231HC is disabled due to an over temperature condition.",
            } ],
        'interlockStatus':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Interlock Status",
            } ],
        'magnetField_target':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Magnetic Field Intensity",
                'unit': "Gauss",
                'display unit': "kGauss",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(GMWClass, GMW, 'GMW')
        #----- PROTECTED REGION ID(GMW.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GMW.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
